// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  imageUrl       String  @db.Text
  externalUserId String  @unique
  bio            String? @db.Text

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream Stream?

  notifications Notification[]
  dailyStats    DailyStats[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  streamMetrics  StreamMetrics[]
  streamSessions StreamSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Notification {
  id      String @id @default(uuid())
  userId  String
  type    String // "follow", "stream_start", "chat_mention", "stream_end"
  title   String
  message String @db.Text
  data    Json?  // donn√©es additionnelles (userId, streamId, etc.)
  read    Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, read])
  @@index([createdAt])
}

// Analytics models
model StreamMetrics {
  id           String   @id @default(uuid())
  streamId     String
  stream       Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)

  // Real-time metrics
  viewerCount  Int      @default(0)
  chatMessages Int      @default(0)

  // Timestamp
  recordedAt   DateTime @default(now())

  @@index([streamId, recordedAt])
  @@index([recordedAt])
}

model StreamSession {
  id             String    @id @default(uuid())
  streamId       String
  stream         Stream    @relation(fields: [streamId], references: [id], onDelete: Cascade)

  // Session statistics
  startedAt      DateTime  @default(now())
  endedAt        DateTime?
  peakViewers    Int       @default(0)
  totalMessages  Int       @default(0)
  averageViewers Float     @default(0)
  duration       Int?      // in seconds
  title          String?   @db.Text

  @@index([streamId])
  @@index([startedAt])
}

model DailyStats {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date           DateTime @db.Date
  newFollowers   Int      @default(0)
  totalViews     Int      @default(0)
  streamDuration Int      @default(0) // in seconds
  peakViewers    Int      @default(0)
  totalMessages  Int      @default(0)

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}
